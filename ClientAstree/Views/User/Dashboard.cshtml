@model ClientAstree.Models.DashboardViewModel

@{
    ViewData["Title"] = "Admin Dashboard";

    var deviceCategories = Model.DeviceCategories.Distinct().ToList();
    var deviceCounts = deviceCategories.Select(dc => Model.DeviceCategories.Count(d => d == dc)).ToList();
}

<style>
    body {
        font-family: 'Open Sans', sans-serif;
        background-color: #F2F2F2;
        color: #333333;
    }

    .bg-image {
        background-image: url('/img/fam1.png');
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
        min-height: 100vh;
    }

    .content-container {
        background-color: rgba(255, 255, 255, 0.8);
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        margin: 20px auto;
    }

    .card {
        margin-bottom: 20px;
        background-color: #1E3A7A;
        color: white;
        border: none;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        transition: transform 0.2s, box-shadow 0.2s;
    }

    .card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
    }

    .card-title {
        font-family: 'Roboto', sans-serif;
        font-size: 1.5rem;
        color: #FFFF;
    }

    .card-text {
        font-size: 1rem;
        color: white;
    }

    .card-img-top {
        width: 100px;
        height: auto;
        display: block;
        margin-left: auto;
        margin-right: auto;
        padding-top: 10px;
    }

    .card-body {
        text-align: center;
    }

    .btn-primary {
        background-color: #FFFF;
        color: #1E3A7A;
        border: none;
    }

    .btn-primary:hover {
        background-color: #4E6B8B;
        color: #1E3A7A;
    }

    .chart-container {
        margin: 20px 0;
    }

    .table-container {
        margin-top: 20px;
    }
</style>

<div class="container-fluid bg-image">
    <div class="row">
        <div class="col-lg-2 col-md-3 col-sm-4 py-0 my-0 px-0 mx-0">
            @Html.Partial("_SideMenu")
        </div>

        <div class="col-lg-10 col-md-9 col-sm-8">
            <div class="content-container">
                <div class="row">

                    @* Summary Cards *@
                    @foreach (var card in new[] { 
                        new { Title = "Automobile Contracts", Count = Model.AutomobileContractsCount, Url = "/AutomobileContract/Index", Image = "/img/dashboard/cardash.png" },
                        new { Title = "Property Contracts", Count = Model.PropertyContractsCount, Url = "/PropertyContract/Index", Image = "/img/dashboard/houseDash.png" },
                        new { Title = "Users", Count = Model.UsersCount, Url = "/User", Image = "/img/dashboard/userDash.png" },
                        new { Title = "Complaints", Count = Model.ComplaintsCount, Url = "/Complaints/Index", Image = "/img/dashboard/complaintDash.png" } 
                    })
                    {
                        <div class="col-md-3">
                            <div class="card" style="width: 100%;">
                                <img class="card-img-top" src="@card.Image" alt="@card.Title Logo">
                                <div class="card-body">
                                    <h4 class="card-title">@card.Title</h4>
                                    <p class="card-text">@card.Count @card.Title.ToLower().Replace(" contracts", "")</p>
                                    <a href="@card.Url" class="btn btn-primary">View @card.Title</a>
                                </div>
                            </div>
                        </div>
                    } 

                    @* Detailed Analytics Card *@
                    <div class="col-md-6">
                        <div class="card" style="width: 100%;">
                            <img class="card-img-top" src="/img/dashboard/analyticsDash.png" alt="Analytics Logo">
                            <div class="card-body">
                                <h4 class="card-title">Analytics Summary (Last 30 Days)</h4>
                                @if (Model.Sessions != null && Model.Sessions.Any())  
                                {
                                    <p class="card-text">Sessions: @Model.Sessions.FirstOrDefault()</p>
                                    <p class="card-text">Page Views: @Model.ScreenPageViews.FirstOrDefault()</p>
                                    <p class="card-text">Bounce Rate: @Model.BounceRates.FirstOrDefault()</p>
                                    <p class="card-text">Users: @Model.TotalUsers.FirstOrDefault()</p>
                                    <p class="card-text">Engagement Rate: @Model.EngagementRates.FirstOrDefault()</p>
                                    <a href="#detailedTable" class="btn btn-primary">View Details</a> 
                                }
                                else
                                {
                                    <p class="card-text">No analytics data available yet.</p> 
                                }
                            </div>
                        </div>
                    </div>

                    @* Detailed Analytics Table *@
                    <div class="col-12">
                        <h3>Detailed Analytics Data</h3>
                        <button class="btn btn-primary" onclick="toggleTable()">Toggle Detailed Table</button>
                        <table id="detailedTable" class="table table-striped" style="display: none;">
                            <thead>
                                <tr>
                                    <th>Date</th>
                                    <th>Sessions</th>
                                    <th>Page Views</th>
                                    <th>Bounce Rate</th>
                                    <th>Total Users</th>
                                    <th>Engagement Rate</th>
                                    <th>Event Count</th>
                                    <th>Conversions</th>
                                    <th>Country</th>
                                    <th>Region</th>
                                    <th>Session Source</th>
                                    <th>Session Default Channel Grouping</th>
                                    <th>Page Path</th>
                                    <th>Event Name</th>
                                    <th>Device Category</th>
                                    <th>Browser</th>
                                </tr>
                            </thead>
                            <tbody>
                                @for (int i = 0; i < Model.Dates.Count; i++)
                                {
                                    <tr>
                                        <td>@DateTime.ParseExact(Model.Dates[i], "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("yyyy/MM/dd")</td>
                                        <td>@Model.Sessions[i]</td>
                                        <td>@Model.ScreenPageViews[i]</td>
                                        <td>@Model.BounceRates[i]</td>
                                        <td>@Model.TotalUsers[i]</td>
                                        <td>@Model.EngagementRates[i]</td>
                                        <td>@Model.EventCounts[i]</td>
                                        <td>@Model.Conversions[i]</td>
                                        <td>@Model.Countries[i]</td>
                                        <td>@Model.Regions[i]</td>
                                        <td>@Model.SessionSources[i]</td>
                                        <td>@Model.SessionDefaultChannelGroupings[i]</td>
                                        <td>@Model.PagePaths[i]</td>
                                        <td>@Model.EventNames[i]</td>
                                        <td>@Model.DeviceCategories[i]</td>
                                        <td>@Model.Browsers[i]</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    @* Line Charts *@
                    <div class="col-12 chart-container">
                        <canvas id="lineChart1"></canvas>
                    </div>
                    <div class="col-12 chart-container">
                        <canvas id="lineChart2"></canvas>
                    </div>

                    @* Bar Chart *@
                    <div class="col-12 chart-container">
                        <canvas id="barChart"></canvas>
                    </div>

                    @* Pie Chart *@
                    <div class="col-12 chart-container">
                        <canvas id="pieChart"></canvas>
                    </div>

                    @* Geo Maps *@
                    <div class="col-12 chart-container">
                        <div id="geoChart" style="width: 100%; height: 500px;"></div>
                    </div>

                    @* Bubble Charts *@
                    <div class="col-12 chart-container">
                        <canvas id="bubbleChart"></canvas>
                    </div>

                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.5.1/chart.min.js"></script>
<script src="https://www.gstatic.com/charts/loader.js"></script>
<script>
    document.addEventListener("DOMContentLoaded", function() {
        function toggleTable() {
            var table = document.getElementById('detailedTable');
            table.style.display = table.style.display === 'none' ? 'block' : 'none';
        }

        // Line Chart 1: Page Views + Users / Date
        var lineChart1Ctx = document.getElementById('lineChart1').getContext('2d');
        var lineChart1 = new Chart(lineChart1Ctx, {
            type: 'line',
            data: {
                labels: @Html.Raw(Json.Serialize(Model.Dates.Select(date => DateTime.ParseExact(date, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("yyyy/MM/dd")))),
                datasets: [
                    {
                        label: 'Page Views',
                        data: @Html.Raw(Json.Serialize(Model.ScreenPageViews)),
                        backgroundColor: 'rgba(153, 102, 255, 0.2)',
                        borderColor: 'rgba(153, 102, 255, 1)',
                        borderWidth: 1,
                        fill: false
                    },
                    {
                        label: 'Users',
                        data: @Html.Raw(Json.Serialize(Model.TotalUsers)),
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        borderColor: 'rgba(75, 192, 192, 1)',
                        borderWidth: 1,
                        fill: false
                    }
                ]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            callback: function(value) { return Number.isInteger(value) ? value : null; },
                            stepSize: 1
                        }
                    }
                }
            }
        });

        // Line Chart 2: Sessions + Bounce Rate + Engagement Rate / Date
        var lineChart2Ctx = document.getElementById('lineChart2').getContext('2d');
        var lineChart2 = new Chart(lineChart2Ctx, {
            type: 'line',
            data: {
                labels: @Html.Raw(Json.Serialize(Model.Dates.Select(date => DateTime.ParseExact(date, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture).ToString("yyyy/MM/dd")))),
                datasets: [
                    {
                        label: 'Sessions',
                        data: @Html.Raw(Json.Serialize(Model.Sessions)),
                        backgroundColor: 'rgba(54, 162, 235, 0.2)',
                        borderColor: 'rgba(54, 162, 235, 1)',
                        borderWidth: 1,
                        fill: false
                    },
                    {
                        label: 'Bounce Rate',
                        data: @Html.Raw(Json.Serialize(Model.BounceRates)),
                        backgroundColor: 'rgba(255, 99, 132, 0.2)',
                        borderColor: 'rgba(255, 99, 132, 1)',
                        borderWidth: 1,
                        fill: false
                    },
                    {
                        label: 'Engagement Rate',
                        data: @Html.Raw(Json.Serialize(Model.EngagementRates)),
                        backgroundColor: 'rgba(255, 159, 64, 0.2)',
                        borderColor: 'rgba(255, 159, 64, 1)',
                        borderWidth: 1,
                        fill: false
                    }
                ]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            callback: function(value) { return Number.isInteger(value) ? value : null; },
                            stepSize: 1
                        }
                    }
                }
            }
        });

        // Bar Chart: Regions and Number of Users/Sessions
        var barChartCtx = document.getElementById('barChart').getContext('2d');
        var barChart = new Chart(barChartCtx, {
            type: 'bar',
            data: {
                labels: @Html.Raw(Json.Serialize(Model.Regions.Distinct())),
                datasets: [{
                    label: 'Number of Users/Sessions',
                    data: @Html.Raw(Json.Serialize(Model.Regions.Distinct().Select(region => Model.Regions.Count(r => r == region)))),
                    backgroundColor: 'rgba(54, 162, 235, 0.2)',
                    borderColor: 'rgba(54, 162, 235, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            callback: function(value) { return Number.isInteger(value) ? value : null; },
                            stepSize: 1
                        }
                    }
                }
            }
        });

        // Pie Chart: Device Categories
        var pieChartCtx = document.getElementById('pieChart').getContext('2d');
        var pieChart = new Chart(pieChartCtx, {
            type: 'pie',
            data: {
                labels: @Html.Raw(Json.Serialize(deviceCategories)),
                datasets: [{
                    label: 'Device Categories',
                    data: @Html.Raw(Json.Serialize(deviceCounts)),
                    backgroundColor: ['rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)', 'rgba(75, 192, 192, 0.2)', 'rgba(255, 206, 86, 0.2)'],
                    borderColor: ['rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(75, 192, 192, 1)', 'rgba(255, 206, 86, 1)'],
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true
            }
        });

        // Geo Map
        google.charts.load('current', {'packages':['geochart']});
        google.charts.setOnLoadCallback(drawGeoChart);
        function drawGeoChart() {
            var data = google.visualization.arrayToDataTable([
                ['Country', 'Sessions'],
                @foreach (var country in Model.Countries.Distinct())
                {
                    <text>['@country', @Model.Countries.Count(c => c == country)],</text>
                }
            ]);

            console.log(data.toJSON()); // Debug statement to verify the data being passed

            var options = {
                region: 'world',
                displayMode: 'regions',
                colorAxis: {colors: ['#e0f7fa', '#006064']}
            };

            var chart = new google.visualization.GeoChart(document.getElementById('geoChart'));
            chart.draw(data, options);
        }

        // Bubble Chart
        var bubbleCtx = document.getElementById('bubbleChart').getContext('2d');
        var bubbleChart = new Chart(bubbleCtx, {
            type: 'bubble',
            data: {
                datasets: [{
                    label: 'Traffic Source Performance',
                    data: @Html.Raw(Json.Serialize(Model.Dates.Select((date, i) => new { x = DateTime.ParseExact(date, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture), y = Model.TotalUsers[i], r = Model.EventCounts[i] }))),
                    backgroundColor: 'rgba(255, 99, 132, 0.2)',
                    borderColor: 'rgba(255, 99, 132, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                scales: {
                    x: {
                        type: 'time',
                        time: {
                            unit: 'day',
                            displayFormats: {
                                day: 'YYYY/MM/DD'
                            }
                        },
                        position: 'bottom'
                    },
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });

    });
</script>
