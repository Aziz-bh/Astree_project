@model ClientAstree.Models.UserDetailsViewModel

@{
    ViewData["Title"] = "User Details";
}

<div class="container-fluid mb-5 pb-5">
    <div class="row">
        <!-- Side Menu on the left -->
        <div class="col-md-2 py-0 my-0 px-0 mx-0">
            @Html.Partial("_SideMenu")
        </div>

        <!-- Main Content Area -->
        <div class="col-md-10">
                        <div class="title">
<nav aria-label="breadcrumb" role="navigation">
  <ol class="breadcrumb">
    <li class="breadcrumb-item">Admin</li>
    <li class="breadcrumb-item" aria-current="page">Users</li>
       <li class="breadcrumb-item active" aria-current="page">UserDetails</li>
  </ol>
</nav>
            </div>
<div>
    <h4>User Information</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">@Html.DisplayNameFor(model => model.User.Id)</dt>
        <dd class="col-sm-10">@Html.DisplayFor(model => model.User.Id)</dd>

        <dt class="col-sm-2">@Html.DisplayNameFor(model => model.User.Email)</dt>
        <dd class="col-sm-10">@Html.DisplayFor(model => model.User.Email)</dd>

        <dt class="col-sm-2">@Html.DisplayNameFor(model => model.User.FirstName)</dt>
        <dd class="col-sm-10">@Html.DisplayFor(model => model.User.FirstName)</dd>

        <dt class="col-sm-2">@Html.DisplayNameFor(model => model.User.LastName)</dt>
        <dd class="col-sm-10">@Html.DisplayFor(model => model.User.LastName)</dd>

        <dt class="col-sm-2">@Html.DisplayNameFor(model => model.User.PhoneNumber)</dt>
        <dd class="col-sm-10">@Html.DisplayFor(model => model.User.PhoneNumber)</dd>

        <dt class="col-sm-2">@Html.DisplayNameFor(model => model.User.Roles)</dt>
        <dd class="col-sm-10">@Html.DisplayFor(model => model.User.Roles)</dd>

        <dt class="col-sm-2">@Html.DisplayNameFor(model => model.User.CIN)</dt>
        <dd class="col-sm-10">@Html.DisplayFor(model => model.User.CIN)</dd>

        <dt class="col-sm-2">@Html.DisplayNameFor(model => model.User.BirthDate)</dt>
        <dd class="col-sm-10">@Html.DisplayFor(model => model.User.BirthDate)</dd>

        <dt class="col-sm-2">@Html.DisplayNameFor(model => model.User.Nationality)</dt>
        <dd class="col-sm-10">@Html.DisplayFor(model => model.User.Nationality)</dd>

        <dt class="col-sm-2">@Html.DisplayNameFor(model => model.User.Gender)</dt>
        <dd class="col-sm-10">@Html.DisplayFor(model => model.User.Gender)</dd>

        <dt class="col-sm-2">@Html.DisplayNameFor(model => model.User.Civility)</dt>
        <dd class="col-sm-10">@Html.DisplayFor(model => model.User.Civility)</dd>
    </dl>
</div>

<div>
    @Html.ActionLink("Edit", "Edit", new { id = Model.User.Id }) |
    <a asp-action="Index">Back to List</a>
</div>
   <h3>Automobile Contracts</h3>
@if (Model.AutomobileContracts.Any())
{
    <div class="form-group">
        <input type="text" class="form-control" id="searchInputAuto" placeholder="Search Automobiles">
    </div>
    <div class="row" id="automobileCards">
        @foreach (var auto in Model.AutomobileContracts)
        {
            <div class="col-md-4 automobile-card" 
            data-startdate="@auto.StartDate.ToString("yyyy-MM-dd")"
            data-enddate="@auto.EndDate.ToString("yyyy-MM-dd")">
            
            <div class="card" style="width: 20rem;">
<img class="card-img-top" src="@(auto.VehicleType == "Business" ? "/img/contract/auto/businessCar.jpg" : "/img/contract/auto/personalCar.png")" alt="Vehicle Image">
                <div class="card-body">
                    <h4 class="card-title">@auto.VehicleMake @auto.Model</h4>
                    <p class="card-text">
                        Type: @auto.VehicleType <br>
                        Start Date: @auto.StartDate.ToString("yyyy-MM-dd") <br>
                        End Date: @auto.EndDate.ToString("yyyy-MM-dd") <br>
                        Quota: @auto.Quota<br>
                        guarantees:     @foreach (var guarantee in auto.GuaranteesList)
                                            {
                                                <span class="badge badge-success">@guarantee</span>

                                            }
                    </p>
                    <a href="#" class="btn btn-primary">View Details</a>
                </div>
            </div>
        </div>
    }
</div>
<nav aria-label="Automobiles Page navigation">
    <ul class="pagination" id="autoPagination"></ul>
</nav>
}
else{
     <p>No contracts available.</p>
}


<h3>Property Contracts</h3>
@if (Model.PropertyContracts.Any())
{
    <div class="form-group">
        <input type="text" class="form-control" id="searchInputProp" placeholder="Search Properties">
    </div>
    <div class="row" id="propertyCards">
        @foreach (var prop in Model.PropertyContracts)
        {
            <div class="col-md-4 property-card" 
            data-startdate="@prop.StartDate.ToString("yyyy-MM-dd")"
            data-enddate="@prop.EndDate.ToString("yyyy-MM-dd")">
                            <div class="card" style="width: 20rem;">
                                <img class="card-img-top" src="@(prop.Type == "Commercial" ? "/img/commercial.png" : "/img/residential.png")" alt="Property Image">
                                <div class="card-body">
                                    <h4 class="card-title">@prop.Location</h4>
                                    <p class="card-text">
                                        Type: @prop.Type <br>
                                        Start Date: @prop.StartDate.ToString("yyyy-MM-dd") <br>
                                        End Date: @prop.EndDate.ToString("yyyy-MM-dd") <br>
                                        Value: @prop.PropertyValue <br>
                                        Coverages: @String.Join(", ", prop.CoveragesList)
                                    </p>
                                    <a href="#" class="btn btn-primary">View Details</a>
                                </div>
                            </div>
                        </div>
                    }
                </div>
 <nav aria-label="Properties Page navigation">
    <ul class="pagination" id="propPagination"></ul>
</nav>
            }
            else
            {
                <p>No property contracts available.</p>
            }
</div>
</div>
</div>
<!-- Load jQuery first -->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>

<script>
document.addEventListener("DOMContentLoaded", function() {
    function paginate(items, paginationId, itemsPerPage) {
        let numItems = items.length;
        let numPages = Math.ceil(numItems / itemsPerPage);

        items.hide().slice(0, itemsPerPage).show();

        let pagination = $('#' + paginationId);
        pagination.empty(); // Clear existing pagination before new setup

        if(numPages > 1) { // Only create pagination if needed
            let ul = $('<ul class="pagination"></ul>');
            pagination.append(ul);

            for (let i = 0; i < numPages; i++) {
                let pageNum = i + 1;
                let pageItem = $('<li class="page-item"><a class="page-link" href="#">' + pageNum + '</a></li>');
                pageItem.on('click', function(e) {
                    e.preventDefault();
                    items.hide();
                    let start = pageNum * itemsPerPage - itemsPerPage;
                    let end = start + itemsPerPage;
                    items.slice(start, end).show();
                    $('.page-item').removeClass('active');
                    $(this).addClass('active');
                });
                ul.append(pageItem);
            }
            $('.page-item:first-of-type').addClass('active');
        }
    }

    function setupSearchAndPagination(searchInputSelector, itemsSelector, paginationId, itemsPerPage) {
        let items = $(itemsSelector);
        paginate(items, paginationId, itemsPerPage); // Initial pagination setup

        $(searchInputSelector).on('keyup', function() {
            let searchTerm = $(this).val().toLowerCase();
            items = $(itemsSelector).filter(function() {
                return $(this).text().toLowerCase().indexOf(searchTerm) > -1;
            });

            items.show();
            $(itemsSelector).not(items).hide(); // Hide non-matching items
            paginate(items, paginationId, itemsPerPage); // Repaginate based on search results
        });
    }

    // Initialize search and pagination for both automobile and property cards
    setupSearchAndPagination('#searchInputAuto', '.automobile-card', 'autoPagination', 3);
    setupSearchAndPagination('#searchInputProp', '.property-card', 'propPagination', 3);
});
</script>
